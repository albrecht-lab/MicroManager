import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import java.io.*;
import java.net.*;
import net.miginfocom.swing.MigLayout;
import java.awt.EventQueue;

global.vport = mmc.getProperty("ArduinoValveControl", "ShowPort");
try {
	global.rport = mmc.getProperty("MicrowellPlateRobot", "ShowPort");
	robotExists = true; 
}
catch (e) {
	robotExists = false;
}

////////////////////////////
//  Functions

// Serial write
serialWrite( String portName, String command) 
{
	mmc.setSerialPortCommand(portName, command, "/r");
	mmc.sleep(SERIAL_WAIT);
}

// Wait for serial
waitForSerial( String portName, String testString ) 
{
	found = false;
	j = 0;
	while (found == false || j>50) {
		str1 = "BLANK";
		j++;
		answer = mmc.readFromSerialPort(portName);
		if (answer.capacity() > 0) {
   		for(i=0; i<answer.capacity(); i++){
      		if(str1 == "BLANK") {
         		str1 = "" + answer.get(i);
      		} else {
         		str1 = "" + str1 +(char)answer.get(i);
      		}
  			}
		}

		if (str1.contains(testString)) {
			found = true;
			//print(str1);
		} else {
			mmc.sleep(250);
		}
	}
}

// Move to microwell position
moveToMicrowellPosition( String nextWell ) 
{

	serialWrite(vport, "v2off"); // Close outflow valve

	String[] wellList = nextWell.split(",");

	print(wellList.length);
	for (int i = 0; i < wellList.length; i++) {
  		nextWell = wellList[i];

		// Move to new well
		mmc.readFromSerialPort(rport); // flush output buffer;
		mmc.setSerialPortCommand(rport, nextWell, "/r"); 
		waitForSerial(rport, "OK");

		if (wellString != void) {
			wellString.setText("Current position: "+nextWell);
			wellString.repaint();
		}
	}
	
	serialWrite(vport, "v2on"); // Open outflow valve
	print("move complete");
} 


// Move to multiple microwell positions
moveToPositionList( String controlString, int delaySec ) 
{

	String[] positionList = controlString.split(";");

	// Display position list
	for (int i = 0; i < positionList.length; i++) {
  		String nextString = positionList[i];
		print( "" + (i+1) + ": " + nextString );
	}

	print(positionList.length);
	for (int i = 0; i < positionList.length; i++) {
  		String nextString = positionList[i];
		moveToMicrowellPosition(nextString);

		for (int j = 0; j < delaySec; j++) {
			mmc.sleep(1000);
		}
	}
}

//////////////////// End functions /////////////////


	if (f3 != void) {
		f3.dispatchEvent(new WindowEvent(f3, WindowEvent.WINDOW_CLOSING));
	}
	
	f3 = new JFrame("Serial Panel");
	
	f3.setBounds(200,100,733,533);
	cp3 = f3.getContentPane(); 
	cp3.setLayout(new MigLayout("ins 20", "[para]0[][1001p,fill][601p][951p,fill]")); 
	f3.setSize(500, 500);
	f3.setLocation(800, 500);
	f3.setResizable(true);

	JButton valve1on = new JButton("Valve 1: ON");
	JButton valve1off = new JButton("Valve 1: OFF");
	JButton valve2on = new JButton("Valve 2: ON");
	JButton valve2off = new JButton ("Valve 2: OFF");
 	JButton sendCommandValve = new JButton ("Send (Valve)");
	
	valve1on.setPreferredSize(new Dimension(95,20));
	valve1off.setPreferredSize(new Dimension(95,20));
	valve2on.setPreferredSize(new Dimension(95,20));
	valve2off.setPreferredSize(new Dimension(95,20));
	sendCommandValve.setPreferredSize(new Dimension(95,20));

	serialString = new JFormattedTextField("");
	serialString.setColumns(23);
	//serialString.setRows(2);

	valve1on.addActionListener(this);
	valve1off.addActionListener(this);
	valve2on.addActionListener(this);
	valve2off.addActionListener(this);
	sendCommandValve.addActionListener(this);
			
	cp3.add(valve1on,"cell 0 1");
	cp3.add(valve1off,"cell 1 1");
	cp3.add(valve2on,"cell 0 2");
	cp3.add(valve2off,"cell 1 2, wrap");
			
	//cp3.add(new JSeparator(),"gapleft rel,growx");
	cp3.add(serialString,"span 2, wrap");
	cp3.add(sendCommandValve);

	if (robotExists) {
		JButton sendCommandRobot = new JButton ("Send (Robot)");
		sendCommandRobot.setPreferredSize(new Dimension(95,20));
		sendCommandRobot.addActionListener(this);
		cp3.add(sendCommandRobot,"wrap 20");

		/// All this new for multiwell plate

		cp3.add(new JLabel("Multiwell Plate"));
		cp3.add(new JSeparator(),"growx, wrap");
	
		JButton home = new JButton("Home");	
		JButton start = new JButton("Start");
		home.setPreferredSize(new Dimension(95,20));
		start.setPreferredSize(new Dimension(95,20));
		home.addActionListener(this);
		start.addActionListener(this);
		cp3.add(home);
		cp3.add(start,"wrap");

		cp3.add(new JLabel("Delay(s):"));
		delayString = new JFormattedTextField("60");
		delayString.setColumns(6);
		cp3.add(delayString, "span, wrap");

		cp3.add(new JLabel("Positions:"), "wrap");
		multiwellString = new JFormattedTextField("0,A1-;B1-,A2-");
		multiwellString.setColumns(23);
		cp3.add(multiwellString,"span 2, wrap 20");

		wellString = new JLabel("Current position: ");
		cp3.add(wellString, "span, wrap");
	}

	f3.pack();
	f3.show();
	
	
	void actionPerformed(ActionEvent e) { 
		if(e.getActionCommand() == "Valve 1: ON"){
			mmc.setSerialPortCommand(vport, "v1on", "/r");
		}
		if(e.getActionCommand() == "Valve 1: OFF"){
			mmc.setSerialPortCommand(vport, "v1off", "/r");
		}
		if(e.getActionCommand() == "Valve 2: ON"){
			mmc.setSerialPortCommand(vport, "v2on", "/r");
		}
		if(e.getActionCommand() == "Valve 2: OFF"){
			mmc.setSerialPortCommand(vport, "v2off", "/r");
		}	
		if(e.getActionCommand() == "Send (Valve)"){
			String serialtext = serialString.getText();
			mmc.setSerialPortCommand(vport, serialtext, "/r");
		}
		if(e.getActionCommand() == "Send (Robot)"){
			String serialtext = serialString.getText();
			mmc.setSerialPortCommand(rport, serialtext, "/r");
		}
		if(e.getActionCommand() == "Home"){
			mmc.setSerialPortCommand(rport, "0", "/r");
		}
		if(e.getActionCommand() == "Start"){
			String commandList = multiwellString.getText();
			delay = Integer.parseInt(delayString.getText());
			moveToPositionList(commandList,delay);
		}

	}
		
